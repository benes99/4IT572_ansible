---
- name: Launch and configure new EC2 Instance
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Launch new EC2 Instance
      ec2_instance:
        instance_type: t3.medium
        image_id: ami-051f8a213df8bc089
        region: us-east-1
        key_name: test
        vpc_subnet_id: subnet-0d44c818b4376e0af
        tags:
          Name: Eshop-project
        count: 1
        network:
          assign_public_ip: yes
        wait: yes
        security_group: eShop
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      register: ec2_instance_result

    - name: Add instance host to group
      add_host:
        hostname: "{{ item.public_ip_address }}"
        groupname: launched
      loop: "{{ ec2_instance_result.instances }}"

    - name: Wait for SSH connection
      delegate_to: "{{ item.public_dns_name }}"
      wait_for_connection:
        delay: 30
        timeout: 300
      loop: "{{ ec2_instance_result.instances }}"

- name: Configure new EC2 Instance
  hosts: launched
  connection: ssh
  become: yes
  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
  tasks:
    - name: Install Git and Docker
      yum:
        name:
          - git
          - docker
        state: latest
        update_cache: yes

    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Set proper rights to Docker service
      shell: usermod -a -G docker ec2-user

    - name: Fetch eshop from Git
      git:
        repo: 'https://github.com/benes99/4IT572_project.git'
        dest: ./app

    - name: Build Eshop Docker image
      docker_image:
        build:
          path: ./app
        name: eshop
        tag: latest
        source: build

    - name: Run Eshop Docker
      docker_container:
        name: eshop
        image: eshop
        state: started
        ports:
          - "80:3000"

    - name: Wait for eshop to run
      wait_for:
        port: 80

- name: Terminate existing Eshop-project instances
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Gather facts on all Eshop-project instances except the new one
      ec2_instance_info:
        region: us-east-1
        filters:
          "tag:Name": Eshop-project
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      register: existing_instances

    - name: Terminate existing Eshop-project instances except the new one
      ec2_instance:
        state: absent
        ids: "{{ existing_instances.instances | rejectattr('instance_id', 'equalto', ec2_instance_result.instances[0].instance_id) | map(attribute='instance_id') | list }}"
        wait: yes
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        security_token: "{{ session_token }}"
      when: existing_instances.instances | length > 1
